#property copyright "Zipho Matsoso"
#property link      ""
#property version   "1.00"
//+------------------------------------------------------------------+
//| Includes                                                         |
//+------------------------------------------------------------------+
#include <Trade\Trade.mqh>

//+------------------------------------------------------------------+
//| Inputs                                                           |
//+------------------------------------------------------------------+
input group "==== General Inputs ===="
input long InpMagicNumber = 12345;     // Magic Number
input double InpLots = 0.01;           // Lot Size 
input int InpStopLoss = 150;           // Stop Loss in % of range (0=off)
input int InpTakeProfit = 200;         // Take Profit in % of range (0=off)

input group "==== Range Inputs ===="
input int InpRangeStart = 600;         // Range Start time in munites
input int InpRangeDuration = 120;      // Range Duration In munites
input int InpRangeClose = 1200;        // Range close time in munites (-1=off)

enum BREAKOUT_MODE_ENUM{
   ONE_SIGNAL,                         // One breakout per range
   TWO_SIGNALS                         // High and Low Breakouts
};
input BREAKOUT_MODE_ENUM InpBreakoutMode = ONE_SIGNAL; // Breakout Mode

input group "==== Day of Week Filter ===="
input bool InpMonday = true;           // Range on Monday
input bool InpTuesday = true;          // Range on Tuesday
input bool InpWednesday = true;        // Range on Wednesday
input bool InpThursday = true;         // Range on Thursday
input bool InpFriday = true;           // Range on Friday

//+------------------------------------------------------------------+
//| Global Variables                                                 |
//+------------------------------------------------------------------+
struct RANGE_STRUCT{
   datetime start_time;                // Start of range
   datetime end_time;                  // End of the range 
   datetime close_time;                // Close time 
   double high;                        // High of the range
   double low;                         // Low of the range
   bool f_entry;                       // Flag if we are inside the range
   bool f_high_breakout;               // Flag if a high breakout occurred
   bool f_low_breakout;                // Flag if a low breakout occurred
   
   RANGE_STRUCT() : start_time(0), end_time(0), close_time(0), high(0), low(DBL_MAX), f_entry(false), f_high_breakout(false), f_low_breakout(false) {};
};

RANGE_STRUCT range;
MqlTick prevTick, lastTick;

CTrade trade;

int OnInit()
  {
   //Check user inputs
   if(!CheckInputs()){return INIT_PARAMETERS_INCORRECT;}
  
   //Set Magic Number
   trade.SetExpertMagicNumber(InpMagicNumber);
   
   //Calculated new range if inputs changed
   if(_UninitReason==REASON_PARAMETERS && CountOpenPositions()==0){ 
      CalculateRange();
   }
   
   //draw Objects
   DrawObjects();

   return(INIT_SUCCEEDED);
  }
  
//+------------------------------------------------------------------+
//| Expert deinitialization function                                 |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
  {
      //Delete Objects
      ObjectsDeleteAll(NULL,"range");
   
  }
//+------------------------------------------------------------------+
//| Expert tick function                                             |
//+------------------------------------------------------------------+
void OnTick()
{

      //Get current tick
      prevTick = lastTick;
      SymbolInfoTick(_Symbol,lastTick);
      
      //Range Calculation
      if(lastTick.time >= range.start_time && lastTick.time < range.end_time){
         //set flag
         range.f_entry = true;
         
         //New High
         if(lastTick.ask > range.high){
            range.high = lastTick.ask;
            DrawObjects();
         }
        //New Low
         if(lastTick.bid < range.low){
            range.low = lastTick.bid;
            DrawObjects();
         }
      
      }
      
      //Close Positions
      if(InpRangeClose >= 0 && lastTick.time >= range.close_time){
        // if(!ClosePositions()) {return;}
        ClosePositions2();
      }
      
      
      //Calculate new range
      if(((InpRangeClose >=0 && lastTick.time >= range.close_time) // Closed time reached
      || (range.f_high_breakout && range.f_low_breakout)          // Both breakout flags are true
      || (range.end_time == 0)                                    // Range not yet calculated
      || (range.end_time !=0 && lastTick.time > range.end_time && !range.f_entry))   // There was a range calculated but no tick inside
      && CountOpenPositions()==0){
            CalculateRange();
       }
       
       //Check breakouts
       CheckBreakOuts();
}


////////////////////////////////////////////////////////////////////////////////////
//CalculateRange
////////////////////////////////////////////////////////////////////////////////////
void CalculateRange()
{
   //Reset range variables
   range.start_time = 0;
   range.end_time = 0;
   range.close_time =0;
   range.high = 0.0;
   range.low = DBL_MAX;
   range.f_entry = false;
   range.f_high_breakout =false;
   range.f_low_breakout = false;

   //Calculate range start time
   int time_cycle = 86400;
   range.start_time = (lastTick.time - (lastTick.time % time_cycle)) + InpRangeStart*60;
   
   for(int i=0; i<8; i++){
      MqlDateTime tmp;
      TimeToStruct(range.start_time,tmp);
      int dow = tmp.day_of_week;
         if(lastTick.time >= range.start_time || dow==6 || dow ==0
         || (dow==1 && !InpMonday)
         || (dow==2 && !InpTuesday)
         || (dow==3 && !InpWednesday)
         || (dow==4 && !InpThursday)
         || (dow==5 && !InpFriday)
         ){
            range.start_time += time_cycle;
         }
   }
   
    //Calculate range end time
    range.end_time = range.start_time + InpRangeDuration*60;
    for(int i=0; i<2; i++){
     MqlDateTime tmp;
     TimeToStruct(range.end_time,tmp);
     int dow = tmp.day_of_week;
         if(dow ==6 || dow==0){
            range.end_time += time_cycle;
         }
    }   
 
     //Calculate range close
   if(InpRangeClose>=0){  
   range.close_time = (range.end_time - (range.end_time % time_cycle)) + InpRangeClose*60;
   
   for(int i=0; i<3; i++){
      MqlDateTime tmp;
      TimeToStruct(range.close_time,tmp);
      int dow = tmp.day_of_week;
         if(range.close_time <= range.end_time || dow==6 || dow ==0){
            range.close_time += time_cycle;
         }
   }
   }
   //DrawObjects
   DrawObjects();
 
}
////////////////////////////////////////////////////////////////////////////////////
//End CalculateRange 
////////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////////
//DrawObjects
////////////////////////////////////////////////////////////////////////////////////
void DrawObjects()
{
      // Start Time
      ObjectDelete(NULL,"range start");
      if(range.start_time > 0){
         ObjectCreate(NULL, "range start",OBJ_VLINE,0,range.start_time,0);
         ObjectSetString(NULL,"range start",OBJPROP_TOOLTIP,"start of range \n"+TimeToString(range.start_time,TIME_DATE|TIME_MINUTES));
         ObjectSetInteger(NULL,"range start",OBJPROP_COLOR,clrBlue);
         ObjectSetInteger(NULL,"range start",OBJPROP_WIDTH,2);
         ObjectSetInteger(NULL,"range start",OBJPROP_BACK,true);
      }

      // End Time
      ObjectDelete(NULL,"range end");
      if(range.end_time > 0){
         ObjectCreate(NULL, "range end",OBJ_VLINE,0,range.end_time,0);
         ObjectSetString(NULL,"range end",OBJPROP_TOOLTIP,"end of range \n"+TimeToString(range.end_time,TIME_DATE|TIME_MINUTES));
         ObjectSetInteger(NULL,"range end",OBJPROP_COLOR,clrBlue);
         ObjectSetInteger(NULL,"range end",OBJPROP_WIDTH,2);
         ObjectSetInteger(NULL,"range end",OBJPROP_BACK,true);
      }
      
      
      // Close Time
      ObjectDelete(NULL,"range close");
      if(range.close_time > 0){
         ObjectCreate(NULL, "range close",OBJ_VLINE,0,range.close_time,0);
         ObjectSetString(NULL,"range close",OBJPROP_TOOLTIP,"Close of range \n"+TimeToString(range.close_time,TIME_DATE|TIME_MINUTES));
         ObjectSetInteger(NULL,"range close",OBJPROP_COLOR,clrRed);
         ObjectSetInteger(NULL,"range close",OBJPROP_WIDTH,2);
         ObjectSetInteger(NULL,"range close",OBJPROP_BACK,true);
      }

      // High
      ObjectsDeleteAll(NULL,"range high");
      if(range.high > 0){
         ObjectCreate(NULL, "range high",OBJ_TREND,0,range.start_time,range.high,range.end_time,range.high);
         ObjectSetString(NULL,"range high",OBJPROP_TOOLTIP,"High of range \n"+DoubleToString(range.high,_Digits));
         ObjectSetInteger(NULL,"range high",OBJPROP_COLOR,clrBlue);
         ObjectSetInteger(NULL,"range high",OBJPROP_WIDTH,2);
         ObjectSetInteger(NULL,"range high",OBJPROP_BACK,true);

         ObjectCreate(NULL, "range high ",OBJ_TREND,0,range.end_time,range.high,InpRangeClose>=0 ? range.close_time : INT_MAX,range.high);
         ObjectSetString(NULL,"range high ",OBJPROP_TOOLTIP,"High of range \n"+DoubleToString(range.high,_Digits));
         ObjectSetInteger(NULL,"range high ",OBJPROP_COLOR,clrBlue);
         ObjectSetInteger(NULL,"range high ",OBJPROP_BACK,true);
         ObjectSetInteger(NULL,"range high ",OBJPROP_STYLE,STYLE_DOT);
      }
 
       // Low
      ObjectsDeleteAll(NULL,"range low");
         if(range.low < DBL_MAX){
         ObjectCreate(NULL, "range low",OBJ_TREND,0,range.start_time,range.low,range.end_time,range.low);
         ObjectSetString(NULL,"range low",OBJPROP_TOOLTIP,"Low of range \n"+DoubleToString(range.low,_Digits));
         ObjectSetInteger(NULL,"range low",OBJPROP_COLOR,clrBlue);
         ObjectSetInteger(NULL,"range low",OBJPROP_WIDTH,2);
         ObjectSetInteger(NULL,"range low",OBJPROP_BACK,true);
         
         ObjectCreate(NULL, "range low ",OBJ_TREND,0,range.end_time,range.low,InpRangeClose>=0 ? range.close_time : INT_MAX,range.low);
         ObjectSetString(NULL,"range low ",OBJPROP_TOOLTIP,"Low of range \n"+DoubleToString(range.low,_Digits));
         ObjectSetInteger(NULL,"range low ",OBJPROP_COLOR,clrBlue);
         ObjectSetInteger(NULL,"range low ",OBJPROP_BACK,true);
         ObjectSetInteger(NULL,"range low ",OBJPROP_STYLE,STYLE_DOT);
         
      }
      
      //Refresh Chart
      ChartRedraw();
     
}
////////////////////////////////////////////////////////////////////////////////////
//End DrawObjects 
////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////
//CheckBreakOuts
////////////////////////////////////////////////////////////////////////////////////
void CheckBreakOuts()
{
   //Check if we are after the range end
   if(lastTick.time >= range.end_time && range.end_time > 0 && range.f_entry){
      
      //check for high breakout
      if(!range.f_high_breakout && lastTick.ask >= range.high){
         range.f_high_breakout = true;
         if(InpBreakoutMode==ONE_SIGNAL){range.f_low_breakout = true;}
         
         //Calculate SL and TP
         double sl = InpStopLoss == 0 ? 0 : NormalizeDouble(lastTick.bid - ((range.high - range.low) * InpStopLoss * 0.01),_Digits);
         double tp = InpTakeProfit == 0 ? 0 : NormalizeDouble(lastTick.bid + ((range.high - range.low) * InpTakeProfit * 0.01),_Digits);
         
         //Open buy position
         trade.PositionOpen(_Symbol,ORDER_TYPE_BUY,InpLots,lastTick.ask,sl,tp,"TimerangeEA");
      }
 
 
      //check for low breakout
      if(!range.f_low_breakout && lastTick.bid >= range.low){
         range.f_low_breakout = true;
         if(InpBreakoutMode==ONE_SIGNAL){range.f_high_breakout = true;}

          //Calculate SL and TP
         double sl = InpStopLoss == 0 ? 0 : NormalizeDouble(lastTick.ask + ((range.high - range.low) * InpStopLoss * 0.01),_Digits);
         double tp = InpTakeProfit == 0 ? 0 : NormalizeDouble(lastTick.ask - ((range.high - range.low) * InpTakeProfit * 0.01),_Digits);
        
         //Open sell position
         trade.PositionOpen(_Symbol,ORDER_TYPE_SELL,InpLots,lastTick.bid,sl,tp,"TimerangeEA");
      }
      
   
   }

}
////////////////////////////////////////////////////////////////////////////////////
//End CheckBreakOuts 
////////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////////
//ClosePositions
////////////////////////////////////////////////////////////////////////////////////
bool ClosePositions()
{
   int total = PositionsTotal();
      for(int i=total-1; i>=0; i++){
         if(!total != PositionsTotal()){ total = PositionsTotal(); i=total; continue;}
            ulong ticket = PositionGetTicket(i);   //Select position
            if(ticket<=0){Print("Failed to get postion ticket"); return false;}
               if(!PositionSelectByTicket(ticket)){Print("Failed to select position by ticket"); return false;}
               long magicnumber;
               if(!PositionGetInteger(POSITION_MAGIC,magicnumber)){Print("Failed to get position by magic number"); return false;}
                 if(magicnumber == InpMagicNumber){
                     trade.PositionClose(ticket);
                     if(trade.ResultRetcode() != TRADE_RETCODE_DONE){
                        Print("Failed to close position. Result: "+(string)trade.ResultRetcode()+": "+trade.ResultRetcodeDescription());
                        return false;
                     }
                 }
      }
   return true;
}
////////////////////////////////////////////////////////////////////////////////////
//End ClosePositions 
////////////////////////////////////////////////////////////////////////////////////




////////////////////////////////////////////////////////////////////////////////////
//CountOpenPositions
////////////////////////////////////////////////////////////////////////////////////
int CountOpenPositions()
{
   int counter = 0;
   int total =PositionsTotal();
      for(int i=total-1; i>=0; i--){
         ulong ticket = PositionGetTicket(i);
         if(ticket <= 0){Print("Failed to get position ticket"); return -1;}
            if(!PositionSelectByTicket(ticket)){Print("Failed to select position by ticket"); return -1;}
               ulong magicnumber;
                  if(!PositionGetInteger(POSITION_MAGIC,magicnumber)){Print("Failed to get postion by magic number"); return -1;}
                     if(InpMagicNumber==magicnumber){counter++;}
      }

   return counter;
}
////////////////////////////////////////////////////////////////////////////////////
//End CountOpenPositions 
////////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////////
//ClosePositions2
////////////////////////////////////////////////////////////////////////////////////
void ClosePositions2()
{
           
      for(int i=PositionsTotal() - 1; i >=  0; i--)
      {
          ulong ticketNo = PositionGetTicket(i);
          trade.PositionClose(ticketNo);
       }

}
////////////////////////////////////////////////////////////////////////////////////
//End ClosePositions2 
////////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////////
//CheckInputs
////////////////////////////////////////////////////////////////////////////////////
bool CheckInputs()
{

   if(InpMagicNumber <= 0){
      Alert("MagicNumber <=0");
      return false;
   }

   if(InpLots <= 0 || InpLots > 1){
      Alert("Lots <= 0 or > 1");
      return false;
   }
   
   if(InpStopLoss < 0 || InpStopLoss > 1000){
      Alert("Stop Loss < 0 or > 1000");
      return false;
   }
 
    if(InpTakeProfit < 0 || InpTakeProfit > 1000){
      Alert("Take Profit < 0 or > 1000");
      return false;
   }
 
    if(InpRangeClose < 0 && InpStopLoss == 0){
      Alert("Close time and stop loss is off");
      return false;
   }
  
   if(InpRangeStart < 0 || InpRangeStart >= 1440){
      Alert("Range Start < 0 or > 1440");
      return false;
   }
   
   if(InpRangeDuration <= 0 || InpRangeDuration >= 1440){
      Alert("Range Duration <= 0 or >= 1440");
      return false;
   }

   if(InpRangeClose >= 1440 || (InpRangeStart+InpRangeDuration)%1400 == InpRangeClose){
      Alert("Range CloseTime > 1440 or EndTime == CloseTime");
      return false;
   }
 
    if(InpMonday+InpTuesday+InpWednesday+InpThursday+InpFriday == 0){
      Alert("Raange is prohibited on all days of the week");
      return false;
   }

return true;
}
////////////////////////////////////////////////////////////////////////////////////
//End CheckInputs 
////////////////////////////////////////////////////////////////////////////////////
